<html>
<head>
   <link rel="SHORTCUT ICON" href="favjavancss.ico" />
   <title>JavaNCSS - A Source Measurement Suite for Java</title>
</head>
<body>
<table width="100%" bgcolor="#C0C0C0">
<tr>
<td>
<table width="100%" bgcolor="#374B5D">
<tr>
<td>
<center>&nbsp;</center>
<center><h1>JavaNCSS - A Source Measurement Suite for Java</h1></center>
</td>
</tr>
</table>
</td>
</tr>
</table>
&nbsp;

<br />Ever wondered how many lines of code or how many classes there are
in&nbsp; the Sun JDK? Curious about the size of your own projects - or
do you want to keep track of your work-progress. That's what JavaNCSS is
for.

<p>JavaNCSS is a simple command line utility which measures two standard
source code metrics for the Java programming language. The metrics are
collected globally, for each class and/or for each function.</p>

<p>Here is an example about what JavaNCSS prints out for the Sun JDK 1.1.5
<a href="package.txt">java.*</a> source tree (update: JDK 1.5 api source tree
consists of 569'830 ncss).</p>

<p>JavaNCSS can optionally present its output with a little
<a href="gui.html">graphical user interface</a>. To interactively select Java source
files for counting, <a href="http://www.kclee.de/clemens/jacob/">Jacob</a> (a Java class browser and project
manager) can be used for this purpose.</p>

<p>JavaNCSS can also be used out of an Ant <code>build.xml</code> script as it
comes bundled with an Ant task written by Steve Jernigan.
The JavaNCSS Ant Task is documented on a <a href="JavancssAntTask.html">separate page</a>.</p>

<p>You can always find the newest version of this page at: <a href="http://javancss.codehaus.org/">http://javancss.codehaus.org/</a>
(was previously at <a href="http://www.kclee.de/clemens/java/javancss/">http://www.kclee.de/clemens/java/javancss/</a>).</p>



<h2>Table of Contents</h2>

<ul>
<li><a href="#features">Features and Metrics' JavaNCSS Provides</a></li>

<li><a href="#system_requirements">System Requirements</a></li>

<li><a href="#download">Downloading</a></li>

<li><a href="#usage">Usage</a>
    <ul><li><a href="#xslt">XSLT Stylesheets</a></li></ul>
</li>

<li><a href="#specification">Specification</a></li>

<li><a href="development.html">Development</a></li>

<li><a href="release-history.html">Release History</a></li>

<li><a href="#copyright">Copyright Notice</a></li>

<li><a href="credits.html">Credits</a></li>

<li><a href="#links">Related Links</a></li>
</ul>



<h2><a name="features"></a>Features and Metrics JavaNCSS Provides</h2>
<ul>
<li>Metrics can be applied to global-, class-, or function-level.</li>

<li>Non Commenting Source Statements (NCSS).</li>

<li>Cyclomatic Complexity Number (McCabe metric).</li>

<li>Packages, classes, functions and inner classes are counted.</li>

<li>Number of formal Javadoc comments per class and method.</li>

<li>Average values are calculated.</li>

<li>Command line driven.</li>

<li>A GUI is provided for better output browsing as well as the
integration of JavaNCSS in a project manager and class browser
named <a href="http://www.kclee.de/clemens/jacob/">Jacob</a> for
easy selection of input source files.</li>

<li>XML output (optional).</li>

<li>XSLT stylesheets provided for further generation of HTML,
     and SVG reports and as a basis for your own custom
     reports.</li>

<li>Ant task (written by Steve Jernigan).</li>

<li>Support for Java 1.5 syntax (generics, enums, etc.).</li>

<li>100% Pure Java.</li>

<li>Free software (GNU GPL).</li>

</ul>



<h2><a name="requirements"></a>System Requirements</h2>
	Java JDK &gt;= 1.4.1


<h2><a name="download"></a>Downloading</h2>
<a href="javancss-33.54.zip">JavaNCSS Version 33.54</a>

<h4>Downloading Java Development Kit</h4>

<p>JavaNCSS requires the Java Developer's Kit (JDK) Version 1.4 or above. Since you already seem to have Java source code
you want to measure, I assume you already have a JDK :).
If not, you can download it
via web from <a href="http://java.com/download/">Javasoft</a>.
Follow the link to "JDK 1.4" and download the version applicable to your
environment.
<br />&nbsp;</p>


<h2><a name="usage"></a>Usage</h2>
Make sure <tt>javancss-30.51/lib/javancss.jar</tt>, <tt>javancss-30.51/lib/ccl.jar</tt>, and <tt>javancss30.51/lib/jhbasic.jar</tt> are added to your CLASSPATH.
<p>
Then to start JavaNCSS type: <tt>java javancss.Main</tt>.
As an alternative you can edit and use either the <tt>JAVANCSS.BAT</tt>
or <tt>javancss</tt> file. Just change the
<tt>JAVA_HOME</tt> and <tt>CLASSPATH</tt>
variables according to your system. Make sure you did include the swingall.jar archive in the classpath.</p>
<p>
Now for the first run type in (beeing in the <tt>javancss-30.51</tt> directory itself):</p>
<p>
<tt>./bin/javancss -gui test/*.java</tt></p>
<p>
or
</p><p>
<tt>./bin/javancss -gui -recursive test</tt></p>
<p>
For regression test of JavaNCSS use:</p>
<p>
<tt>java javancss.test.JavancssTest</tt></p>
<p>If no parameter is provided for JavaNCSS, standard
input (stdin) is used as the input stream. Multiple java source files can
be specified in the command line. If a '@' char is put in front of a file name, then not this file will be measured but its content will be interpreted as a list of Java source files that
shall be counted. The '@' functionality can be used recursively inside this file as well. Wild cards are not supported yet. (If
the operating system processes the command line for the program, then you
are lucky. Windows doesn't do that.) Instead use something like <tt>cat *.java | javancss</tt>
or <tt>type *.java | javancss</tt>. Of course, this can lead to ambiguities when mixing
source files that belong to a package with files that doesn't.</p>
<p> If no option
is given, JavaNCSS only calculates the total non commenting source statements
(NCSS) of the given input.</p>
<p>JavaNCSS can also be used conveniently via Ant. For details
have a look at the <a href="JavancssAntTask.html">JavaNCSS Ant Task page</a>,
especially at the example at the bottom of that page. You can
also have a look at the build.xml file that gets distributed with
JavaNCSS itself (see "javancss" target).</p>

<h3>Synopsis</h3>
<tt>javancss [-option] stdin | [@]source_file*</tt>

<h3>Options</h3>

<dl>

<dt><tt>-ncss</tt></dt>
<dd>
This is the default which counts total non commenting source statements
and nothing else.</dd>

<dt><tt>-package</tt></dt>
<dd>
Collects the metrics data for each package. This is the most top level
view javancss offers for your projects. Take a look here what javancss
prints out for the Sun JDK 1.1.5 <a href="package.txt">java.*</a> source
tree.</dd>

<dt><tt>-object</tt></dt>
<dd>
Collects the metrics data for each class/interface. For an example program
output, look <a href="object.txt">here</a>.</dd>

<dt><tt>-function</tt></dt>
<dd>
Collects the metrics data for each function. For an example program output,
look <a href="function.txt">here</a>.</dd>

<dt><tt>-all</tt></dt>
<dd>
The same as '-package -object -function'.</dd>

<dt><tt>-gui</tt></dt>
<dd>
Opens a gui to presents the '-all' output in tabbed panels.
</dd>

<dt><tt>-xml</tt></dt>
<dd>
Output in xml and not in ascii format. Additional option '-all' is recommended.
</dd>

<dt><tt>-out file</tt></dt>
<dd>
Output goes normally to standard output, with this
option an output file can be specified.
</dd>

<dt><tt>-recursive</tt></dt>
<dd>
Java file in sub directories will be parsed as well. Be careful
not to get caught in an endless loops because some Unix links.
</dd>

<dt><tt>-check</tt></dt>
<dd>
Trigger JavaNCSS self test suite.
</dd>

<dt><tt>-version</tt></dt>
<dd>
Prints out the version of JavaNCSS.</dd>

<dt><tt>-help</tt></dt>
<dd>
Prints out some basic information.</dd>
</dl>

<a name="xslt"></a><h3>XSLT Stylesheets</h3>

JavaNCSS comes with some XSLT stylesheet (<tt>javancss-30.51/xslt/javancss2text.xsl</tt> and <tt>javancss-30.51/xslt/javancss2html.xsl</tt>). These stylesheets can be used to
convert XML output from JavaNCSS to ASCII or HTML output. In case of
the ASCII output this is of course
quite boring and much slower as JavaNCSS creates the identical output
by default anyway. But you can use this stylesheet (or any of the others
shipped as well) as a starting
point to have your own presentation format.
You could also change sort rules (e.g. sort by NCSS)
or add your own filters to the output (e.g. show only methods
with NCSS greater some limit).<p>

Assuming you have e.g. Xalan2 installed and somewhere in your
path is a shell script named 'xslt' that knows how to invoke
Java with the Xalan 2 main processor class (org.apache.xalan.xslt.Process),
here is how you can make use of JavaNCSS' XSLT stylesheet:</p><p>
<tt>cd javancss-30.51</tt><br />
<tt>javancss -all -xml -recursive src &gt; example.xml</tt><br />
<tt>xslt -in example.xml -xsl xslt/javancss2text.xsl</tt></p><p>
Have fun. If you create a useful new stylesheet for JavaNCSS,
I would be happy to get a copy of it.</p>

<h4>SVG Output</h4>
Yves Coene <i><a href="mailto:Yves.Coene@spacebel.be">&lt;Yves.Coene@spacebel.be&gt;</a></i> has donated some XSLT stylesheets which produce beautiful
SVG charts out of JavaNCSS's XML output.<p>

Use e.g. batik as an SVG viewer and have a look at the example
files in directory xslt/svg under the JavaNCSS home directory.</p><p>

Here is an <a href="chart_ncss.svg">example SVG chart</a> file.</p><p>

Generation of SVG files is similar to using other XSLT stylesheets
as described above.</p>



<h2><a name="specification"></a>Specification</h2>

<h3>Non Commenting Source Statements (NCSS)</h3>
Statements for JavaNCSS are not statements as specified in the Java Language
Specification but include all kinds of declarations too.
<br />Roughly spoken, NCSS is approximately equivalent to counting ';' and
'{' characters in Java source files.

<p>Actually, the NCSS counter gets incremented by one for each:
<br />&nbsp;
<br />&nbsp;</p>

<center><table BORDER="0">
<tr>
<th></th>
<th>Examples</th>
<th>Comment</th>
</tr>

<tr>
<td>Package declaration</td>

<td><code>package java.lang;</code></td>

<td></td>
</tr>

<tr>
<td>Import declaration</td>

<td><code>import java.awt.*;</code></td>

<td></td>
</tr>

<tr>
<td valign="top">Class declaration</td>

<td>- <code>public class Foo {</code>
<br />- <code>public class Foo extends Bla {</code></td>

<td></td>
</tr>

<tr>
<td valign="top">Interface declaration</td>

<td><code>public interface Able {</code></td>

<td></td>
</tr>

<tr>
<td valign="top">Field declaration</td>

<td valign="top">- <code>int a;</code>
<br />- <code>int a, b, c = 5, d = 6;</code></td>

<td>No matter how many fields get actually declared through a comma separated
list, and no matter if these fields get actually initialized, only
one statement is counted. So "int a, b, c = 5, d = 6;" gets only +1 count,
not four or even six (let me know if there is good reason to count it differently).</td>
</tr>

<tr>
<td valign="top">Method declaration</td>

<td>- <code>public void cry();</code>
<br />- <code>public void gib() throws DeadException {</code></td>

<td></td>
</tr>

<tr>
<td>Constructor&nbsp;declaration</td>

<td valign="top"><code>public Foo() {</code></td>

<td></td>
</tr>

<tr>
<td valign="top">Constructor invocation</td>

<td>- <code>this();</code>
<br />- <code>super();</code></td>

<td></td>
</tr>

<tr>
<td valign="top">Statement</td>

<td>- <code>i = 0;</code>
<br />- <code>if (ok)</code>
<br />- <code>if (exit) {</code>
<br />- <code>if (3 == 4);</code>
<br />- <code>if (4 == 4) { ; }</code>
<br />- <code>} else {</code></td>

<td valign="top">expression, if, else, while, do, for, switch, break,
continue, return, throw, synchronized, catch, finally</td>
</tr>

<tr>
<td>Label</td>

<td><code>fine :</code></td>

<td>normal, case, default</td>
</tr>
</table></center>
&nbsp;<br />
Not counted are empty statements, empty blocks or semicolons after closing
brackets. Of course, comments don't get counted too. Closing brackets also
never get counted, the same applies to blocks in general.

<p>In some cases consecutive semicolons are illegal according to the JLS
but JavaNCSS still tolerates them (thought JavaNCSS is still more strict
as 'javac'). Nevertheless they are never counted as two statements.</p>

<h3>Cyclomatic Complexity Number (CCN)</h3>
CCN is also know as McCabe Metric. There exists a much hyped theory behind
it based on graph theory, but it all comes down to simply counting 'if',
'for', 'while' statements etc. in a method. Whenever the control flow of
a method splits, the "CCN counter" gets incremented by one.

<p>Each method has a minimum value of 1 per default. For each of the following
Java keywords/statements this value gets incremented by one:</p>
<ul>
<li><tt>if</tt></li>
<li><tt>for</tt></li>
<li><tt>while</tt></li>
<li><tt>case</tt></li>
<li><tt>catch</tt></li>
<li><tt>&amp;&amp;</tt></li>
<li><tt>||</tt></li>
<li><tt>?</tt></li>
</ul>
<!--Also if the control flow of a method returns abortively the <tt>CCN</tt> value will
be incremented by one:
<ul>
<li><tt>return</tt></li>
<li><tt>throw</tt></li>
</ul>
&nbsp;<br />
An ordinary return at the end of method (no matter if it's a function or a procedure)
will not be counted.
<p>-->
Note that <tt>else</tt>, <tt>default</tt>, and <tt>finally</tt> don't increment the CCN
value any further. On the other hand, a simple method with a <tt>switch</tt> statement
and a huge block of <tt>case</tt> statements can have a surprisingly high CCN value (still it has the same value when converting a <tt>switch</tt>
block to an equivalent sequence of <tt>if</tt> statements).

<!--P>The first article about this trivial software metric is one of the most
cited papers in computer science. Sometimes you just must be the first
to point out some basic shit and you are history. It seems just like a
wonder that nobody was able to package Lines of Code in a more scientific
manner. Now it's too late to label someone's name on it :).-->
<br />



<h2><a name="copyright"></a>Copyright Notice</h2>
JavaNCSS is free software distributed under the GNU General Public License.
Copyright Chr. Clemens Lee.



<h2><a name="links"></a>Related Links</h2>

<ul>
<li><a href="http://www.kclee.de/clemens/java/index.html">Clemens' Java Page</a> - Other Java stuff I did.</li>

<li><a href="http://sonar.codehaus.org/">Sonar</a> is an open source code quality management platform. Sonar enables to collect, analyze and report metrics on source code. Sonar not only offers consolidated reporting on and across projects throughout time, but it becomes the central place to manage code quality. With no complex infrastructure, Sonar fulfills needs in terms of code quality, whether it is to make an audit or implement a continuous improvement process.</li>

<li><a href="http://www.kclee.de/clemens/jacob/index.html">Jacob</a> - A development tool that embeds
the Emacs editor. It can also be used as a gui-frontend for JavaNCSS.</li>

<li><a href="http://www.kclee.de/clemens/psp/">Clemens' PSP Page</a> - JavaNCSS can be used as a
tool for the Personal Software Process (PSP).</li>

<li><a href="http://www.suntest.com/JavaCC/">JavaCC</a> - A Java compiler compiler
from SunTest. JavaNCSS is done with it.</li>

<li><a href="http://www.clarkware.com/software/JDepend.html">JDepend</a> -
Mike Clark's JDepend
"traverses a set of Java source file directories and generates design quality metrics for each Java package.
JDepend allows you to automatically measure the quality of a design in terms of its extensibility,
reusability, and maintainability to effectively manage and
control package dependencies."

<p>While JavaNCSS simply lets you know how much source code
you have to deal with (ncss metric), JDepend informs you
about the package structure of your code and helps you
spotting weaknesses in your global code organization,
e.g. identifying dependency cycles, creating a few independent
packages on which most other package rely on, etc.</p>

<p>You can use JDepend as a quantitative
measurement tool as well.</p>
</li>

<li><a href="http://proguard.sourceforge.net/">ProGuard</a> -
ProGuard is a class file shrinker and obfuscator
by
Eric Lafortune. It differs from
other offerings in its simple and compact configuration, its speed,
and its modest memory usage.

<p>ProGuard is an application which has made use of JavaNCSS
in an unexpected way: "... I've taken the liberty of
using JavaNCSS for producing test results with ProGuard, and,
vice versa, for producing statistics about ProGuard. You can
find the references in the Results section and the Quality
section respectively. The latter section shows how I have
integrated JavaNCSS in a nightly build process."</p></li>
<!--<li>
<a href="http://207.92.81.101/rsm.htm">RSM, C &amp; C++ Code Quality and
Metrics Tool</a> - A similar tool as JavaNCSS written in C for the C language.</li>-->

<li><a href="http://www.dwheeler.com/sloccount/">SLOCCount</a>
is a set of tools for counting physical Source Lines of Code
(SLOC) in a large number of languages of a potentially large
set of programs. This suite of tools was used in a
Estimating Linux's Size to measure the SLOC of an entire
Linux distribution. It runs on Linux, Windows, and hopefully
on other systems too. To run on Windows, you have to install
Cygwin first.
</li>

<li><a href="http://www.cetus-links.org/oo_metrics.html">Cetus Links:
Object-Orientation / Metrics</a></li>
</ul>

</body>
</html>
